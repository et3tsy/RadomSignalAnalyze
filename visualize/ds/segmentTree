package ds

/*
	采用线段树统计区间范围落在[Lowerbound,Upperbound)的次数Record,复杂度O(logN)
	单次修改O(logN)
*/

// 存储结构
type stNode struct {
	lo, ro *stNode // 左/右孩子
	l, r   int     // 支配的区间
	record int     // 出现的次数
}

// 获得对应记录
func (o *stNode) getRecord() int64 {
	if o != nil {
		return o.record
	}
	return 0
}

// 维护值域
func (o *stNode) maintain() {
	o.record = o.lo.getRecord() + o.ro.getRecord()
}

func (o *stNode) update(i int, add int64) {
	if o.l == o.r {
		o.sum += add //
		return
	}
	m := (o.l + o.r) >> 1
	if i <= m {
		if o.lo == nil {
			o.lo = &stNode{l: o.l, r: m}
		}
		o.lo.update(i, add)
	} else {
		if o.ro == nil {
			o.ro = &stNode{l: m + 1, r: o.r}
		}
		o.ro.update(i, add)
	}
	o.maintain()
}

func (o *stNode) query(l, r int) int64 {
	if o == nil || l > o.r || r < o.l {
		return 0 // inf
	}
	if l <= o.l && o.r <= r {
		return o.sum
	}
	return o.op(o.lo.query(l, r), o.ro.query(l, r))
}
